
led_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000362  00800100  00800100  000002b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000064f  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003a8  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000470  00000000  00000000  000014e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000015c  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e2  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000043f  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	24 e0       	ldi	r18, 0x04	; 4
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 36       	cpi	r26, 0x62	; 98
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	e4 d0       	rcall	.+456    	; 0x21a <main>
  52:	e6 c0       	rjmp	.+460    	; 0x220 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <flash>:
 *---------------------------------------------------------------------------*/
void flash()
{
	uint8_t i;
	
	SetAll(true);
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	c7 d0       	rcall	.+398    	; 0x1e8 <SetAll>
	wait_ms(250);
  5a:	8a ef       	ldi	r24, 0xFA	; 250
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	b9 d0       	rcall	.+370    	; 0x1d2 <wait_ms>
	SetAll(false);
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	c2 d0       	rcall	.+388    	; 0x1e8 <SetAll>
	wait_ms(250);
  64:	8a ef       	ldi	r24, 0xFA	; 250
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	b4 d0       	rcall	.+360    	; 0x1d2 <wait_ms>
  6a:	08 95       	ret

0000006c <Initialize>:
void SetLedLevel(VECTOR v, uint8_t s)
{
	if(v.x < X_MAX && v.y < Y_MAX && s <= BYTE)
	{
		led_level[v.x][v.y / BYTE].level64 |=  (LED_LEVEL_MASK[BYTE] << (v.y % BYTE) );
		led_level[v.x][v.y / BYTE].level64 &= ~(LED_LEVEL_MASK[8]    << (v.y % BYTE) );
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	e0 e6       	ldi	r30, 0x60	; 96
  72:	f1 e0       	ldi	r31, 0x01	; 1
  74:	a1 e0       	ldi	r26, 0x01	; 1
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	80 e6       	ldi	r24, 0x60	; 96
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
{
	if(v.x < X_MAX && v.y < Y_MAX && s <= BYTE)
	{
		led_level[v.x][v.y / BYTE].level64 |=  (LED_LEVEL_MASK[BYTE] << (v.y % BYTE) );
  7a:	94 e0       	ldi	r25, 0x04	; 4
  7c:	ed 01       	movw	r28, r26
  7e:	21 97       	sbiw	r28, 0x01	; 1
  80:	18 82       	st	Y, r1
  82:	10 82       	st	Z, r1
  84:	11 82       	std	Z+1, r1	; 0x01
  86:	12 82       	std	Z+2, r1	; 0x02
  88:	13 82       	std	Z+3, r1	; 0x03
  8a:	14 82       	std	Z+4, r1	; 0x04
  8c:	15 82       	std	Z+5, r1	; 0x05
  8e:	16 82       	std	Z+6, r1	; 0x06
  90:	17 82       	std	Z+7, r1	; 0x07
  92:	1c 92       	st	X, r1
  94:	10 86       	std	Z+8, r1	; 0x08
  96:	11 86       	std	Z+9, r1	; 0x09
  98:	12 86       	std	Z+10, r1	; 0x0a
		led_level[v.x][v.y / BYTE].level64 &= ~(LED_LEVEL_MASK[8]    << (v.y % BYTE) );
  9a:	13 86       	std	Z+11, r1	; 0x0b
  9c:	14 86       	std	Z+12, r1	; 0x0c
  9e:	15 86       	std	Z+13, r1	; 0x0d
  a0:	16 86       	std	Z+14, r1	; 0x0e
  a2:	17 86       	std	Z+15, r1	; 0x0f
  a4:	70 96       	adiw	r30, 0x10	; 16
  a6:	12 96       	adiw	r26, 0x02	; 2
  a8:	e8 17       	cp	r30, r24
  aa:	f9 07       	cpc	r31, r25
  ac:	39 f7       	brne	.-50     	; 0x7c <Initialize+0x10>
  ae:	10 92 60 04 	sts	0x0460, r1
  b2:	10 92 61 04 	sts	0x0461, r1
  b6:	16 bc       	out	0x26, r1	; 38
  b8:	82 e0       	ldi	r24, 0x02	; 2
	}
}
  ba:	85 bd       	out	0x25, r24	; 37
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 6e 00 	sts	0x006E, r24
  c2:	9f ef       	ldi	r25, 0xFF	; 255
  c4:	9b b9       	out	0x0b, r25	; 11
  c6:	9a b9       	out	0x0a, r25	; 10
  c8:	15 b8       	out	0x05, r1	; 5
	// output
	Y_AXIS = 0xff;			// PORTD Initialize
	DDRD = 0xff;			// bit 0-7 set to Output
	
	PORTB = 0x00;
	DDRB = 0x01;
  ca:	84 b9       	out	0x04, r24	; 4
	
	sei();
  cc:	78 94       	sei
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <__vector_16>:
 * Argument	: VECTOR v
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
 * Return	: -
 *---------------------------------------------------------------------------*/
static void LightLed()
{
	//現状のハードがx=1しかないので、とりあえずx=0 or 1にて点灯させる。
	if(pos_x == 0 || pos_x == 1) {
  e8:	80 91 60 04 	lds	r24, 0x0460
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	80 f4       	brcc	.+32     	; 0x110 <__vector_16+0x3c>
		Y_AREA = area_y;
  f0:	80 91 61 04 	lds	r24, 0x0461
  f4:	85 b9       	out	0x05, r24	; 5
		Y_AXIS = led_map[pos_x / (Y_AREA_NUM)][area_y];
  f6:	e0 91 60 04 	lds	r30, 0x0460
  fa:	e6 95       	lsr	r30
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	e8 0f       	add	r30, r24
 104:	f1 1d       	adc	r31, r1
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	05 c0       	rjmp	.+10     	; 0x11a <__vector_16+0x46>
		//	   | led_level[pos_x / (Y_AREA_NUM)][area_y].level8[duty / (X_MAX * Y_AREA_NUM)];
	} else {
		Y_AREA = area_y;
 110:	80 91 61 04 	lds	r24, 0x0461
 114:	85 b9       	out	0x05, r24	; 5
		Y_AXIS = 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8b b9       	out	0x0b, r24	; 11
	}
	
	area_y++;
	pos_x++;
 11a:	80 91 60 04 	lds	r24, 0x0460
 11e:	8f 5f       	subi	r24, 0xFF	; 255
	} else {
		Y_AREA = area_y;
		Y_AXIS = 0xff;
	}
	
	area_y++;
 120:	90 91 61 04 	lds	r25, 0x0461
 124:	9f 5f       	subi	r25, 0xFF	; 255
	pos_x++;
	area_y %= Y_AREA_NUM;
 126:	91 70       	andi	r25, 0x01	; 1
 128:	90 93 61 04 	sts	0x0461, r25
	pos_x  %= Y_AREA_NUM * X_MAX;
 12c:	9b ea       	ldi	r25, 0xAB	; 171
 12e:	89 9f       	mul	r24, r25
 130:	91 2d       	mov	r25, r1
 132:	11 24       	eor	r1, r1
 134:	92 95       	swap	r25
 136:	96 95       	lsr	r25
 138:	96 95       	lsr	r25
 13a:	93 70       	andi	r25, 0x03	; 3
 13c:	20 e6       	ldi	r18, 0x60	; 96
 13e:	92 9f       	mul	r25, r18
 140:	80 19       	sub	r24, r0
 142:	11 24       	eor	r1, r1
 144:	80 93 60 04 	sts	0x0460, r24
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
	LightLed();
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <SetLed>:
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLed(VECTOR v, bool s)
{
	if(v.x < X_MAX && v.y < Y_MAX)
 15c:	80 33       	cpi	r24, 0x30	; 48
 15e:	c0 f5       	brcc	.+112    	; 0x1d0 <SetLed+0x74>
 160:	90 31       	cpi	r25, 0x10	; 16
 162:	b0 f5       	brcc	.+108    	; 0x1d0 <SetLed+0x74>
	{
		// 1:Light ON, 0:Light OFF
		if(s)
 164:	66 23       	and	r22, r22
 166:	d9 f0       	breq	.+54     	; 0x19e <SetLed+0x42>
		{
			led_map[v.x][v.y / BYTE] &= ~_BV(v.y % BYTE);
 168:	e8 2f       	mov	r30, r24
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	89 2f       	mov	r24, r25
 16e:	86 95       	lsr	r24
 170:	86 95       	lsr	r24
 172:	86 95       	lsr	r24
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e8 0f       	add	r30, r24
 17a:	f1 1d       	adc	r31, r1
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	97 70       	andi	r25, 0x07	; 7
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	a9 01       	movw	r20, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <SetLed+0x32>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	9a 95       	dec	r25
 190:	e2 f7       	brpl	.-8      	; 0x18a <SetLed+0x2e>
 192:	ca 01       	movw	r24, r20
 194:	80 95       	com	r24
 196:	90 81       	ld	r25, Z
 198:	89 23       	and	r24, r25
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret
		}
		else
		{
			led_map[v.x][v.y / BYTE] |= _BV(v.y % BYTE);
 19e:	e8 2f       	mov	r30, r24
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	89 2f       	mov	r24, r25
 1a4:	86 95       	lsr	r24
 1a6:	86 95       	lsr	r24
 1a8:	86 95       	lsr	r24
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	e8 0f       	add	r30, r24
 1b0:	f1 1d       	adc	r31, r1
 1b2:	e0 50       	subi	r30, 0x00	; 0
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	97 70       	andi	r25, 0x07	; 7
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	a9 01       	movw	r20, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <SetLed+0x68>
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	9a 95       	dec	r25
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <SetLed+0x64>
 1c8:	ca 01       	movw	r24, r20
 1ca:	90 81       	ld	r25, Z
 1cc:	89 2b       	or	r24, r25
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <wait_ms>:
 * Argument	: uint16_t t
 * Return	: -
 *---------------------------------------------------------------------------*/
void wait_ms(uint16_t t)
{
	while(t--) _delay_ms(1);
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <wait_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	ef ec       	ldi	r30, 0xCF	; 207
 1d8:	f7 e0       	ldi	r31, 0x07	; 7
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <wait_ms+0x8>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <wait_ms+0xe>
 1e0:	00 00       	nop
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	c1 f7       	brne	.-16     	; 0x1d6 <wait_ms+0x4>
 1e6:	08 95       	ret

000001e8 <SetAll>:
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	18 2f       	mov	r17, r24
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	0a c0       	rjmp	.+20     	; 0x20c <SetAll+0x24>
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
 1f8:	61 2f       	mov	r22, r17
 1fa:	8d 2f       	mov	r24, r29
 1fc:	9c 2f       	mov	r25, r28
 1fe:	ae df       	rcall	.-164    	; 0x15c <SetLed>
 200:	cf 5f       	subi	r28, 0xFF	; 255
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
 202:	c0 31       	cpi	r28, 0x10	; 16
 204:	c9 f7       	brne	.-14     	; 0x1f8 <SetAll+0x10>
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 206:	df 5f       	subi	r29, 0xFF	; 255
 208:	d0 33       	cpi	r29, 0x30	; 48
 20a:	11 f0       	breq	.+4      	; 0x210 <SetAll+0x28>
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 20c:	c0 2f       	mov	r28, r16
 20e:	f4 cf       	rjmp	.-24     	; 0x1f8 <SetAll+0x10>
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
		}
	}
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <main>:
#include "drv.h"
#include "app/app.h"

int main(void)
{
	Initialize();
 21a:	28 df       	rcall	.-432    	; 0x6c <Initialize>
	
    while(1)
    {
		flash();
 21c:	1c df       	rcall	.-456    	; 0x56 <flash>
 21e:	fe cf       	rjmp	.-4      	; 0x21c <main+0x2>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
