
led_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800100  00800100  000002f4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a57  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000708  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000420  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000513  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d8  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000411  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	4b c0       	rjmp	.+150    	; 0xb8 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 36       	cpi	r26, 0x63	; 99
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d1       	rcall	.+516    	; 0x256 <main>
  52:	04 c1       	rjmp	.+520    	; 0x25c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <flash>:
 * とりあえず点滅するだけのテスト
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void flash()
{	
  56:	cf 93       	push	r28
	VECTOR v;
	
	v.x = 0;
	v.y = pos;
  58:	c0 91 00 01 	lds	r28, 0x0100
	
	SetAll(false);
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	e2 d0       	rcall	.+452    	; 0x224 <SetAll>
	SetLed(v ,true);
  60:	61 e0       	ldi	r22, 0x01	; 1
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	9c 2f       	mov	r25, r28
  66:	98 d0       	rcall	.+304    	; 0x198 <SetLed>
	wait_ms(100);
  68:	84 e6       	ldi	r24, 0x64	; 100
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	d0 d0       	rcall	.+416    	; 0x20e <wait_ms>
	pos++;
  6e:	80 91 00 01 	lds	r24, 0x0100
  72:	8f 5f       	subi	r24, 0xFF	; 255
	pos %= Y_MAX;
  74:	8f 70       	andi	r24, 0x0F	; 15
  76:	80 93 00 01 	sts	0x0100, r24
}
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret

0000007e <Initialize>:
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
{
  7e:	e2 e0       	ldi	r30, 0x02	; 2
  80:	f1 e0       	ldi	r31, 0x01	; 1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  82:	82 e6       	ldi	r24, 0x62	; 98
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	df 01       	movw	r26, r30
  88:	11 97       	sbiw	r26, 0x01	; 1
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j]   = 0;
  8a:	1c 92       	st	X, r1
  8c:	10 82       	st	Z, r1
  8e:	32 96       	adiw	r30, 0x02	; 2
 *---------------------------------------------------------------------------*/
void Initialize()
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
  90:	e8 17       	cp	r30, r24
  92:	f9 07       	cpc	r31, r25
  94:	c1 f7       	brne	.-16     	; 0x86 <Initialize+0x8>
			led_map[i][j]   = 0;
			//led_level[i][j].level64 = 0;
		}
	}

	pos_x = 0;
  96:	10 92 61 01 	sts	0x0161, r1
	area_y = 0;
  9a:	10 92 62 01 	sts	0x0162, r1
	//duty = 0;
	
	// Register settings
	// timer
	TCNT0 = 0;				// Timer 0 Initialize
  9e:	16 bc       	out	0x26, r1	; 38
	TCCR0B = 2;				// Clock Select clk/8
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(TOIE0);	// Over Flow Interrupt enable
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 6e 00 	sts	0x006E, r24
	
	// output
	Y_AXIS = 0xff;			// PORTD Initialize
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	9b b9       	out	0x0b, r25	; 11
	DDRD = 0xff;			// bit 0-7 set to Output
  ae:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = 0x00;
  b0:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x01;
  b2:	84 b9       	out	0x04, r24	; 4
	
	sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <__vector_16>:
 * Argument	: VECTOR v
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
static void LightLed()
{
	Y_AXIS = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8b b9       	out	0x0b, r24	; 11
	
	//現状のハードがx=1しかないので、とりあえずx=0にて点灯させる。
	if(pos_x == 0) {
  d4:	80 91 61 01 	lds	r24, 0x0161
  d8:	81 11       	cpse	r24, r1
  da:	22 c0       	rjmp	.+68     	; 0x120 <__vector_16+0x68>
		Y_AREA = area_y / X_MAX;
  dc:	90 91 62 01 	lds	r25, 0x0162
  e0:	8b ea       	ldi	r24, 0xAB	; 171
  e2:	98 9f       	mul	r25, r24
  e4:	91 2d       	mov	r25, r1
  e6:	11 24       	eor	r1, r1
  e8:	92 95       	swap	r25
  ea:	96 95       	lsr	r25
  ec:	97 70       	andi	r25, 0x07	; 7
  ee:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	25 e5       	ldi	r18, 0x55	; 85
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__vector_16+0x3a>
  f6:	00 00       	nop
		_delay_us(CHANGE_DELAY);
		Y_AXIS = led_map[pos_x][area_y / X_MAX];
  f8:	e0 91 61 01 	lds	r30, 0x0161
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 91 62 01 	lds	r25, 0x0162
 102:	98 9f       	mul	r25, r24
 104:	81 2d       	mov	r24, r1
 106:	11 24       	eor	r1, r1
 108:	82 95       	swap	r24
 10a:	86 95       	lsr	r24
 10c:	87 70       	andi	r24, 0x07	; 7
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e8 0f       	add	r30, r24
 114:	f1 1d       	adc	r31, r1
 116:	ef 5f       	subi	r30, 0xFF	; 255
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	80 81       	ld	r24, Z
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	10 c0       	rjmp	.+32     	; 0x140 <__vector_16+0x88>
		//	   | led_level[pos_x / (Y_AREA_NUM)][area_y].level8[duty / (X_MAX * Y_AREA_NUM)];
	} else {
		Y_AREA = area_y/ X_MAX;
 120:	90 91 62 01 	lds	r25, 0x0162
 124:	8b ea       	ldi	r24, 0xAB	; 171
 126:	98 9f       	mul	r25, r24
 128:	81 2d       	mov	r24, r1
 12a:	11 24       	eor	r1, r1
 12c:	82 95       	swap	r24
 12e:	86 95       	lsr	r24
 130:	87 70       	andi	r24, 0x07	; 7
 132:	85 b9       	out	0x05, r24	; 5
 134:	45 e5       	ldi	r20, 0x55	; 85
 136:	4a 95       	dec	r20
 138:	f1 f7       	brne	.-4      	; 0x136 <__vector_16+0x7e>
 13a:	00 00       	nop
		_delay_us(CHANGE_DELAY);
		Y_AXIS = 0xff;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8b b9       	out	0x0b, r24	; 11
	}
	
	area_y++;
 140:	80 91 62 01 	lds	r24, 0x0162
 144:	8f 5f       	subi	r24, 0xFF	; 255
	pos_x++;
 146:	20 91 61 01 	lds	r18, 0x0161
 14a:	2f 5f       	subi	r18, 0xFF	; 255
	pos_x  %= X_MAX;
 14c:	9b ea       	ldi	r25, 0xAB	; 171
 14e:	29 9f       	mul	r18, r25
 150:	31 2d       	mov	r19, r1
 152:	11 24       	eor	r1, r1
 154:	32 95       	swap	r19
 156:	36 95       	lsr	r19
 158:	37 70       	andi	r19, 0x07	; 7
 15a:	40 e3       	ldi	r20, 0x30	; 48
 15c:	34 9f       	mul	r19, r20
 15e:	20 19       	sub	r18, r0
 160:	11 24       	eor	r1, r1
 162:	20 93 61 01 	sts	0x0161, r18
	area_y %= X_MAX * Y_AREA_NUM;
 166:	89 9f       	mul	r24, r25
 168:	91 2d       	mov	r25, r1
 16a:	11 24       	eor	r1, r1
 16c:	92 95       	swap	r25
 16e:	96 95       	lsr	r25
 170:	96 95       	lsr	r25
 172:	93 70       	andi	r25, 0x03	; 3
 174:	20 e6       	ldi	r18, 0x60	; 96
 176:	92 9f       	mul	r25, r18
 178:	80 19       	sub	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	80 93 62 01 	sts	0x0162, r24
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
	LightLed();
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <SetLed>:
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLed(VECTOR v, bool s)
{
	if(v.x < X_MAX && v.y < Y_MAX)
 198:	80 33       	cpi	r24, 0x30	; 48
 19a:	c0 f5       	brcc	.+112    	; 0x20c <SetLed+0x74>
 19c:	90 31       	cpi	r25, 0x10	; 16
 19e:	b0 f5       	brcc	.+108    	; 0x20c <SetLed+0x74>
	{
		// 1:Light ON, 0:Light OFF
		if(s)
 1a0:	66 23       	and	r22, r22
 1a2:	d9 f0       	breq	.+54     	; 0x1da <SetLed+0x42>
		{
			led_map[v.x][v.y / BYTE] &= ~_BV(v.y % BYTE);
 1a4:	e8 2f       	mov	r30, r24
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	89 2f       	mov	r24, r25
 1aa:	86 95       	lsr	r24
 1ac:	86 95       	lsr	r24
 1ae:	86 95       	lsr	r24
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e8 0f       	add	r30, r24
 1b6:	f1 1d       	adc	r31, r1
 1b8:	ef 5f       	subi	r30, 0xFF	; 255
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	97 70       	andi	r25, 0x07	; 7
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	a9 01       	movw	r20, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <SetLed+0x32>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	9a 95       	dec	r25
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <SetLed+0x2e>
 1ce:	ca 01       	movw	r24, r20
 1d0:	80 95       	com	r24
 1d2:	90 81       	ld	r25, Z
 1d4:	89 23       	and	r24, r25
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret
		}
		else
		{
			led_map[v.x][v.y / BYTE] |= _BV(v.y % BYTE);
 1da:	e8 2f       	mov	r30, r24
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	89 2f       	mov	r24, r25
 1e0:	86 95       	lsr	r24
 1e2:	86 95       	lsr	r24
 1e4:	86 95       	lsr	r24
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e8 0f       	add	r30, r24
 1ec:	f1 1d       	adc	r31, r1
 1ee:	ef 5f       	subi	r30, 0xFF	; 255
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	97 70       	andi	r25, 0x07	; 7
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	a9 01       	movw	r20, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <SetLed+0x68>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	9a 95       	dec	r25
 202:	e2 f7       	brpl	.-8      	; 0x1fc <SetLed+0x64>
 204:	ca 01       	movw	r24, r20
 206:	90 81       	ld	r25, Z
 208:	89 2b       	or	r24, r25
 20a:	80 83       	st	Z, r24
 20c:	08 95       	ret

0000020e <wait_ms>:
 * Argument	: uint16_t t
 * Return	: -
 *---------------------------------------------------------------------------*/
void wait_ms(uint16_t t)
{
	while(t--) _delay_ms(1);
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	41 f0       	breq	.+16     	; 0x222 <wait_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	ef ec       	ldi	r30, 0xCF	; 207
 214:	f7 e0       	ldi	r31, 0x07	; 7
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <wait_ms+0x8>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <wait_ms+0xe>
 21c:	00 00       	nop
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	c1 f7       	brne	.-16     	; 0x212 <wait_ms+0x4>
 222:	08 95       	ret

00000224 <SetAll>:
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	18 2f       	mov	r17, r24
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 22e:	d0 e0       	ldi	r29, 0x00	; 0
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 230:	00 e0       	ldi	r16, 0x00	; 0
 232:	0a c0       	rjmp	.+20     	; 0x248 <SetAll+0x24>
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
 234:	61 2f       	mov	r22, r17
 236:	8d 2f       	mov	r24, r29
 238:	9c 2f       	mov	r25, r28
 23a:	ae df       	rcall	.-164    	; 0x198 <SetLed>
 23c:	cf 5f       	subi	r28, 0xFF	; 255
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
 23e:	c0 31       	cpi	r28, 0x10	; 16
 240:	c9 f7       	brne	.-14     	; 0x234 <SetAll+0x10>
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 242:	df 5f       	subi	r29, 0xFF	; 255
 244:	d0 33       	cpi	r29, 0x30	; 48
 246:	11 f0       	breq	.+4      	; 0x24c <SetAll+0x28>
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 248:	c0 2f       	mov	r28, r16
 24a:	f4 cf       	rjmp	.-24     	; 0x234 <SetAll+0x10>
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
		}
	}
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <main>:
#include "drv.h"
#include "app/app.h"

int main(void)
{
	Initialize();
 256:	13 df       	rcall	.-474    	; 0x7e <Initialize>
	
    while(1)
    {
		flash();
 258:	fe de       	rcall	.-516    	; 0x56 <flash>
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0x2>

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
