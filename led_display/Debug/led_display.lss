
led_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  00000336  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a9b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000603  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000034d  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000453  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000148  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b5  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004b2  00000000  00000000  00001c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 31       	cpi	r26, 0x16	; 22
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	23 d1       	rcall	.+582    	; 0x298 <main>
  52:	25 c1       	rjmp	.+586    	; 0x29e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <flash>:
 * とりあえず点滅するだけのテスト
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void flash()
{
  56:	cf 93       	push	r28
	uint8_t i;
	
	SetAll(true);
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	02 d1       	rcall	.+516    	; 0x260 <SetAll>
	for(i = 0; i <= BYTE; i++){
  5c:	c0 e0       	ldi	r28, 0x00	; 0
		SetAllLevel(i);
  5e:	8c 2f       	mov	r24, r28
  60:	0d d1       	rcall	.+538    	; 0x27c <SetAllLevel>
		wait_ms(250);
  62:	8a ef       	ldi	r24, 0xFA	; 250
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	f1 d0       	rcall	.+482    	; 0x24a <wait_ms>
void flash()
{
	uint8_t i;
	
	SetAll(true);
	for(i = 0; i <= BYTE; i++){
  68:	cf 5f       	subi	r28, 0xFF	; 255
  6a:	c9 30       	cpi	r28, 0x09	; 9
  6c:	c1 f7       	brne	.-16     	; 0x5e <flash+0x8>
		SetAllLevel(i);
		wait_ms(250);
	}
}
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <Initialize>:
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
  72:	10 92 00 01 	sts	0x0100, r1
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  76:	10 92 02 01 	sts	0x0102, r1
  7a:	10 92 03 01 	sts	0x0103, r1
  7e:	10 92 04 01 	sts	0x0104, r1
  82:	10 92 05 01 	sts	0x0105, r1
  86:	10 92 06 01 	sts	0x0106, r1
  8a:	10 92 07 01 	sts	0x0107, r1
  8e:	10 92 08 01 	sts	0x0108, r1
  92:	10 92 09 01 	sts	0x0109, r1
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
  96:	10 92 01 01 	sts	0x0101, r1
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  9a:	10 92 0a 01 	sts	0x010A, r1
  9e:	10 92 0b 01 	sts	0x010B, r1
  a2:	10 92 0c 01 	sts	0x010C, r1
  a6:	10 92 0d 01 	sts	0x010D, r1
  aa:	10 92 0e 01 	sts	0x010E, r1
  ae:	10 92 0f 01 	sts	0x010F, r1
  b2:	10 92 10 01 	sts	0x0110, r1
  b6:	10 92 11 01 	sts	0x0111, r1
			}
		}
	}
	
	pos_x = 0;
  ba:	10 92 12 01 	sts	0x0112, r1
	area_y = 0;
  be:	10 92 13 01 	sts	0x0113, r1
	duty = 0;
  c2:	10 92 15 01 	sts	0x0115, r1
  c6:	10 92 14 01 	sts	0x0114, r1
	
	// Register settings
	// timer
	TCNT0 = 0;				// Timer 0 Initialize
  ca:	16 bc       	out	0x26, r1	; 38
	TCCR0B = 1;				// Clock Select ck/256
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(TOIE0);	// Over Flow Interrupt enable
  d0:	80 93 6e 00 	sts	0x006E, r24
	
	// output
	Y_AXIS = 0xff;			// PORTD Initialize
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	9b b9       	out	0x0b, r25	; 11
	DDRD = 0xff;			// 0〜7を出力 Output
  d8:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = 0x00;
  da:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x01;
  dc:	84 b9       	out	0x04, r24	; 4
	
	sei();
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <__vector_16>:
 * Argument	: VECTOR v
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
static void LightLed()
{
	Y_AREA = area_y;
 104:	60 91 13 01 	lds	r22, 0x0113
 108:	65 b9       	out	0x05, r22	; 5
	Y_AXIS = led_map[pos_x / Y_AREA_NUM][area_y]
 10a:	70 91 12 01 	lds	r23, 0x0112
 10e:	27 2f       	mov	r18, r23
 110:	26 95       	lsr	r18
 112:	30 e0       	ldi	r19, 0x00	; 0
	       | led_level[pos_x / Y_AREA_NUM][area_y][duty / (X_MAX * Y_AREA_NUM)];
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	26 0f       	add	r18, r22
 11a:	31 1d       	adc	r19, r1
 11c:	80 91 14 01 	lds	r24, 0x0114
 120:	90 91 15 01 	lds	r25, 0x0115
 124:	ac 01       	movw	r20, r24
 126:	56 95       	lsr	r21
 128:	47 95       	ror	r20
 12a:	f9 01       	movw	r30, r18
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e4 0f       	add	r30, r20
 13a:	f5 1f       	adc	r31, r21
 13c:	ee 5f       	subi	r30, 0xFE	; 254
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 * Return	: -
 *---------------------------------------------------------------------------*/
static void LightLed()
{
	Y_AREA = area_y;
	Y_AXIS = led_map[pos_x / Y_AREA_NUM][area_y]
 140:	d9 01       	movw	r26, r18
 142:	a0 50       	subi	r26, 0x00	; 0
 144:	bf 4f       	sbci	r27, 0xFF	; 255
 146:	40 81       	ld	r20, Z
 148:	2c 91       	ld	r18, X
 14a:	24 2b       	or	r18, r20
 14c:	2b b9       	out	0x0b, r18	; 11
	       | led_level[pos_x / Y_AREA_NUM][area_y][duty / (X_MAX * Y_AREA_NUM)];
	
	pos_x++;
 14e:	7f 5f       	subi	r23, 0xFF	; 255
	pos_x %= (X_MAX * Y_AREA_NUM);
 150:	71 70       	andi	r23, 0x01	; 1
 152:	70 93 12 01 	sts	0x0112, r23
	area_y++;
 156:	6f 5f       	subi	r22, 0xFF	; 255
	area_y %= Y_AREA_NUM;
 158:	61 70       	andi	r22, 0x01	; 1
 15a:	60 93 13 01 	sts	0x0113, r22
	duty++;
 15e:	01 96       	adiw	r24, 0x01	; 1
	duty %= X_MAX * Y_AREA_NUM * BYTE;
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	99 27       	eor	r25, r25
 164:	90 93 15 01 	sts	0x0115, r25
 168:	80 93 14 01 	sts	0x0114, r24
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
	LightLed();
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <SetLed>:
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLed(VECTOR v, bool s)
{
	if(v.x < X_MAX && v.y < Y_MAX)
 18e:	81 11       	cpse	r24, r1
 190:	2e c0       	rjmp	.+92     	; 0x1ee <SetLed+0x60>
 192:	90 31       	cpi	r25, 0x10	; 16
 194:	60 f5       	brcc	.+88     	; 0x1ee <SetLed+0x60>
	{
		// 1:消灯, 0:点灯
		if(s)
 196:	66 23       	and	r22, r22
 198:	b1 f0       	breq	.+44     	; 0x1c6 <SetLed+0x38>
		{
			led_map[v.x][v.y / BYTE] &= ~_BV(v.y % BYTE);
 19a:	e9 2f       	mov	r30, r25
 19c:	e6 95       	lsr	r30
 19e:	e6 95       	lsr	r30
 1a0:	e6 95       	lsr	r30
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	e0 50       	subi	r30, 0x00	; 0
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	97 70       	andi	r25, 0x07	; 7
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	a9 01       	movw	r20, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <SetLed+0x28>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	9a 95       	dec	r25
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <SetLed+0x24>
 1ba:	ca 01       	movw	r24, r20
 1bc:	80 95       	com	r24
 1be:	90 81       	ld	r25, Z
 1c0:	89 23       	and	r24, r25
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret
		}
		else
		{
			led_map[v.x][v.y / BYTE] |= _BV(v.y % BYTE);
 1c6:	e9 2f       	mov	r30, r25
 1c8:	e6 95       	lsr	r30
 1ca:	e6 95       	lsr	r30
 1cc:	e6 95       	lsr	r30
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	e0 50       	subi	r30, 0x00	; 0
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	97 70       	andi	r25, 0x07	; 7
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a9 01       	movw	r20, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <SetLed+0x54>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	9a 95       	dec	r25
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <SetLed+0x50>
 1e6:	ca 01       	movw	r24, r20
 1e8:	90 81       	ld	r25, Z
 1ea:	89 2b       	or	r24, r25
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret

000001f0 <SetLedLevel>:
{
	uint8_t i;
	
	for(i = 1; i <= BYTE; i++) {
		if(i <= s) {
			led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
 1f0:	49 2f       	mov	r20, r25
 1f2:	47 70       	andi	r20, 0x07	; 7
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <SetLedLevel+0xe>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	4a 95       	dec	r20
 200:	e2 f7       	brpl	.-8      	; 0x1fa <SetLedLevel+0xa>
 202:	32 2f       	mov	r19, r18
 204:	30 95       	com	r19
 * 
 * Argument	: VECTOR v
 *          : uint8_t s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
 206:	e8 2f       	mov	r30, r24
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
{
	uint8_t i;
	
	for(i = 1; i <= BYTE; i++) {
		if(i <= s) {
			led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
 20e:	96 95       	lsr	r25
 210:	96 95       	lsr	r25
 212:	96 95       	lsr	r25
 * 
 * Argument	: VECTOR v
 *          : uint8_t s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
 214:	e9 0f       	add	r30, r25
 216:	f1 1d       	adc	r31, r1
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	ee 5f       	subi	r30, 0xFE	; 254
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	df 01       	movw	r26, r30
{
	uint8_t i;
	
	for(i = 1; i <= BYTE; i++) {
 22a:	81 e0       	ldi	r24, 0x01	; 1
		if(i <= s) {
 22c:	68 17       	cp	r22, r24
 22e:	20 f0       	brcs	.+8      	; 0x238 <SetLedLevel+0x48>
			led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
 230:	90 81       	ld	r25, Z
 232:	93 23       	and	r25, r19
 234:	90 83       	st	Z, r25
 236:	03 c0       	rjmp	.+6      	; 0x23e <SetLedLevel+0x4e>
		} else {
			led_level[v.x][v.y / BYTE][i-1] |= _BV(v.y % BYTE);
 238:	9c 91       	ld	r25, X
 23a:	92 2b       	or	r25, r18
 23c:	9c 93       	st	X, r25
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
{
	uint8_t i;
	
	for(i = 1; i <= BYTE; i++) {
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	31 96       	adiw	r30, 0x01	; 1
 242:	11 96       	adiw	r26, 0x01	; 1
 244:	89 30       	cpi	r24, 0x09	; 9
 246:	91 f7       	brne	.-28     	; 0x22c <SetLedLevel+0x3c>
			led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
		} else {
			led_level[v.x][v.y / BYTE][i-1] |= _BV(v.y % BYTE);
		}
	}
}
 248:	08 95       	ret

0000024a <wait_ms>:
 * Argument	: uint16_t t
 * Return	: -
 *---------------------------------------------------------------------------*/
void wait_ms(uint16_t t)
{
	while(t--) _delay_ms(1);
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	41 f0       	breq	.+16     	; 0x25e <wait_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	ef ec       	ldi	r30, 0xCF	; 207
 250:	f7 e0       	ldi	r31, 0x07	; 7
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <wait_ms+0x8>
 256:	00 c0       	rjmp	.+0      	; 0x258 <wait_ms+0xe>
 258:	00 00       	nop
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	c1 f7       	brne	.-16     	; 0x24e <wait_ms+0x4>
 25e:	08 95       	ret

00000260 <SetAll>:
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	d8 2f       	mov	r29, r24
 266:	c0 e0       	ldi	r28, 0x00	; 0
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
 268:	6d 2f       	mov	r22, r29
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	9c 2f       	mov	r25, r28
 26e:	8f df       	rcall	.-226    	; 0x18e <SetLed>
 270:	cf 5f       	subi	r28, 0xFF	; 255
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
 272:	c0 31       	cpi	r28, 0x10	; 16
 274:	c9 f7       	brne	.-14     	; 0x268 <SetAll+0x8>
			SetLed(v, s);
		}
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <SetAllLevel>:
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAllLevel(uint8_t s)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	d8 2f       	mov	r29, r24
 282:	c0 e0       	ldi	r28, 0x00	; 0
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLedLevel(v, s);
 284:	6d 2f       	mov	r22, r29
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	9c 2f       	mov	r25, r28
 28a:	b2 df       	rcall	.-156    	; 0x1f0 <SetLedLevel>
 28c:	cf 5f       	subi	r28, 0xFF	; 255
void SetAllLevel(uint8_t s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
 28e:	c0 31       	cpi	r28, 0x10	; 16
 290:	c9 f7       	brne	.-14     	; 0x284 <SetAllLevel+0x8>
			SetLedLevel(v, s);
		}
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
#include "drv.h"
#include "app/app.h"

int main(void)
{
	Initialize();
 298:	ec de       	rcall	.-552    	; 0x72 <Initialize>
	
    while(1)
    {
		flash();
 29a:	dd de       	rcall	.-582    	; 0x56 <flash>
 29c:	fe cf       	rjmp	.-4      	; 0x29a <main+0x2>

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
