
led_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000364  00800100  00800100  00000442  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000602  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000034d  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000530  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000164  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b5  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000552  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000236b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	7c c0       	rjmp	.+248    	; 0x11a <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	24 e0       	ldi	r18, 0x04	; 4
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 36       	cpi	r26, 0x64	; 100
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	89 d1       	rcall	.+786    	; 0x364 <main>
  52:	ab c1       	rjmp	.+854    	; 0x3aa <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <flash>:
 * とりあえず点滅するだけのテスト
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void flash()
{
  56:	cf 93       	push	r28
	uint8_t i;
	
	SetAll(true);
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	52 d1       	rcall	.+676    	; 0x300 <SetAll>
	SetAllLevel(1);
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	69 d1       	rcall	.+722    	; 0x332 <SetAllLevel>
  60:	c9 e0       	ldi	r28, 0x09	; 9
	for(i = 0; i <= BYTE; i++){
		//SetAllLevel(i);
		wait_ms(250);
  62:	8a ef       	ldi	r24, 0xFA	; 250
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	41 d1       	rcall	.+642    	; 0x2ea <wait_ms>
  68:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	
	SetAll(true);
	SetAllLevel(1);
	for(i = 0; i <= BYTE; i++){
  6a:	d9 f7       	brne	.-10     	; 0x62 <flash+0xc>
		//SetAllLevel(i);
		wait_ms(250);
	}
}
  6c:	cf 91       	pop	r28
  6e:	08 95       	ret

00000070 <Initialize>:
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
{
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	a1 e0       	ldi	r26, 0x01	; 1
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	ef e6       	ldi	r30, 0x6F	; 111
  7a:	f1 e0       	ldi	r31, 0x01	; 1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  7c:	81 e6       	ldi	r24, 0x61	; 97
  7e:	91 e0       	ldi	r25, 0x01	; 1
  80:	ed 01       	movw	r28, r26
  82:	21 97       	sbiw	r28, 0x01	; 1
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
  84:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  86:	ef 01       	movw	r28, r30
  88:	2f 97       	sbiw	r28, 0x0f	; 15
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  8a:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  8c:	ef 01       	movw	r28, r30
  8e:	2e 97       	sbiw	r28, 0x0e	; 14
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  90:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  92:	ef 01       	movw	r28, r30
  94:	2d 97       	sbiw	r28, 0x0d	; 13
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  96:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  98:	ef 01       	movw	r28, r30
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  9c:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  9e:	ef 01       	movw	r28, r30
  a0:	2b 97       	sbiw	r28, 0x0b	; 11
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  a2:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  a4:	ef 01       	movw	r28, r30
  a6:	2a 97       	sbiw	r28, 0x0a	; 10
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  a8:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  aa:	ef 01       	movw	r28, r30
  ac:	29 97       	sbiw	r28, 0x09	; 9
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  ae:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  b0:	ef 01       	movw	r28, r30
  b2:	28 97       	sbiw	r28, 0x08	; 8
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  b4:	18 82       	st	Y, r1
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
  b6:	1c 92       	st	X, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  b8:	ef 01       	movw	r28, r30
  ba:	27 97       	sbiw	r28, 0x07	; 7
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  bc:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  be:	ef 01       	movw	r28, r30
  c0:	26 97       	sbiw	r28, 0x06	; 6
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  c2:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  c4:	ef 01       	movw	r28, r30
  c6:	25 97       	sbiw	r28, 0x05	; 5
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  c8:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  ca:	ef 01       	movw	r28, r30
  cc:	24 97       	sbiw	r28, 0x04	; 4
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  ce:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  d0:	ef 01       	movw	r28, r30
  d2:	23 97       	sbiw	r28, 0x03	; 3
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  d4:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  d6:	ef 01       	movw	r28, r30
  d8:	22 97       	sbiw	r28, 0x02	; 2
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  da:	18 82       	st	Y, r1
/*----------------------------------------------------------------------------
 * Initialize
 * Argument	: -
 * Return	: -
 *---------------------------------------------------------------------------*/
void Initialize()
  dc:	ef 01       	movw	r28, r30
  de:	21 97       	sbiw	r28, 0x01	; 1
		
	for(i = 0; i < X_MAX; i++) {
		for( j = 0; j < Y_AREA_NUM; j++) {
			led_map[i][j] = 0;
			for(k = 0; k < BYTE; k++) {
				led_level[i][j][k] = 0;
  e0:	18 82       	st	Y, r1
  e2:	10 82       	st	Z, r1
  e4:	12 96       	adiw	r26, 0x02	; 2
  e6:	70 96       	adiw	r30, 0x10	; 16
 *---------------------------------------------------------------------------*/
void Initialize()
{
	uint8_t i, j, k;
		
	for(i = 0; i < X_MAX; i++) {
  e8:	a8 17       	cp	r26, r24
  ea:	b9 07       	cpc	r27, r25
  ec:	49 f6       	brne	.-110    	; 0x80 <Initialize+0x10>
				led_level[i][j][k] = 0;
			}
		}
	}
	
	pos_x = 0;
  ee:	10 92 60 04 	sts	0x0460, r1
	area_y = 0;
  f2:	10 92 61 04 	sts	0x0461, r1
	duty = 0;
  f6:	10 92 63 04 	sts	0x0463, r1
  fa:	10 92 62 04 	sts	0x0462, r1
	
	// Register settings
	// timer
	TCNT0 = 0;				// Timer 0 Initialize
  fe:	16 bc       	out	0x26, r1	; 38
	TCCR0B = 1;				// Clock Select ck/1
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(TOIE0);	// Over Flow Interrupt enable
 104:	80 93 6e 00 	sts	0x006E, r24
	
	// output
	Y_AXIS = 0xff;			// PORTD Initialize
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	9b b9       	out	0x0b, r25	; 11
	DDRD = 0xff;			// bit 0-7 set to Output
 10c:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = 0x00;
 10e:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x01;
 110:	84 b9       	out	0x04, r24	; 4
	
	sei();
 112:	78 94       	sei
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <__vector_16>:
 * Argument	: VECTOR v
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
 * Return	: -
 *---------------------------------------------------------------------------*/
static void LightLed()
{
	//現状のハードがx=1しかないので、とりあえずx=0 or 1にて点灯させる。
	if(pos_x < Y_AREA_NUM) {
 13c:	80 91 60 04 	lds	r24, 0x0460
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	70 f5       	brcc	.+92     	; 0x1a0 <__vector_16+0x86>
		Y_AREA = area_y;
 144:	80 91 61 04 	lds	r24, 0x0461
 148:	85 b9       	out	0x05, r24	; 5
		Y_AXIS = led_map[pos_x / (Y_AREA_NUM)][area_y]
 14a:	40 91 60 04 	lds	r20, 0x0460
 14e:	46 95       	lsr	r20
 150:	50 e0       	ldi	r21, 0x00	; 0
			   | led_level[pos_x / (Y_AREA_NUM)][area_y][duty / (X_MAX * Y_AREA_NUM)];
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	48 0f       	add	r20, r24
 158:	51 1d       	adc	r21, r1
 15a:	20 91 62 04 	lds	r18, 0x0462
 15e:	30 91 63 04 	lds	r19, 0x0463
 162:	ab ea       	ldi	r26, 0xAB	; 171
 164:	ba ea       	ldi	r27, 0xAA	; 170
 166:	15 d1       	rcall	.+554    	; 0x392 <__umulhisi3>
 168:	00 24       	eor	r0, r0
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	00 1c       	adc	r0, r0
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	00 1c       	adc	r0, r0
 176:	89 2f       	mov	r24, r25
 178:	90 2d       	mov	r25, r0
 17a:	fa 01       	movw	r30, r20
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	e8 0f       	add	r30, r24
 18a:	f9 1f       	adc	r31, r25
 18c:	e0 5a       	subi	r30, 0xA0	; 160
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
static void LightLed()
{
	//現状のハードがx=1しかないので、とりあえずx=0 or 1にて点灯させる。
	if(pos_x < Y_AREA_NUM) {
		Y_AREA = area_y;
		Y_AXIS = led_map[pos_x / (Y_AREA_NUM)][area_y]
 190:	da 01       	movw	r26, r20
 192:	a0 50       	subi	r26, 0x00	; 0
 194:	bf 4f       	sbci	r27, 0xFF	; 255
 196:	90 81       	ld	r25, Z
 198:	8c 91       	ld	r24, X
 19a:	89 2b       	or	r24, r25
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <__vector_16+0x90>
			   | led_level[pos_x / (Y_AREA_NUM)][area_y][duty / (X_MAX * Y_AREA_NUM)];
	} else {
		Y_AREA = area_y;
 1a0:	80 91 61 04 	lds	r24, 0x0461
 1a4:	85 b9       	out	0x05, r24	; 5
		Y_AXIS = 0xff;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	8b b9       	out	0x0b, r24	; 11
	}
	
	area_y++;
 1aa:	80 91 61 04 	lds	r24, 0x0461
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
	area_y %= Y_AREA_NUM;
 1b0:	81 70       	andi	r24, 0x01	; 1
 1b2:	80 93 61 04 	sts	0x0461, r24
	pos_x++;
 1b6:	80 91 60 04 	lds	r24, 0x0460
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
	pos_x  %= Y_AREA_NUM * X_MAX;
 1bc:	9b ea       	ldi	r25, 0xAB	; 171
 1be:	89 9f       	mul	r24, r25
 1c0:	91 2d       	mov	r25, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	92 95       	swap	r25
 1c6:	96 95       	lsr	r25
 1c8:	96 95       	lsr	r25
 1ca:	93 70       	andi	r25, 0x03	; 3
 1cc:	20 e6       	ldi	r18, 0x60	; 96
 1ce:	92 9f       	mul	r25, r18
 1d0:	80 19       	sub	r24, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	80 93 60 04 	sts	0x0460, r24
	duty++;
 1d8:	80 91 62 04 	lds	r24, 0x0462
 1dc:	90 91 63 04 	lds	r25, 0x0463
 1e0:	01 96       	adiw	r24, 0x01	; 1
	duty   %= Y_AREA_NUM * X_MAX * BYTE;
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	73 e0       	ldi	r23, 0x03	; 3
 1e6:	c1 d0       	rcall	.+386    	; 0x36a <__udivmodhi4>
 1e8:	90 93 63 04 	sts	0x0463, r25
 1ec:	80 93 62 04 	sts	0x0462, r24
 * Return	: -
 *---------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
	LightLed();
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <SetLed>:
 *          : bool	 s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLed(VECTOR v, bool s)
{
	if(v.x < X_MAX && v.y < Y_MAX)
 212:	80 33       	cpi	r24, 0x30	; 48
 214:	c0 f5       	brcc	.+112    	; 0x286 <SetLed+0x74>
 216:	90 31       	cpi	r25, 0x10	; 16
 218:	b0 f5       	brcc	.+108    	; 0x286 <SetLed+0x74>
	{
		// 1:Light ON, 0:Light OFF
		if(s)
 21a:	66 23       	and	r22, r22
 21c:	d9 f0       	breq	.+54     	; 0x254 <SetLed+0x42>
		{
			led_map[v.x][v.y / BYTE] &= ~_BV(v.y % BYTE);
 21e:	e8 2f       	mov	r30, r24
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	89 2f       	mov	r24, r25
 224:	86 95       	lsr	r24
 226:	86 95       	lsr	r24
 228:	86 95       	lsr	r24
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e8 0f       	add	r30, r24
 230:	f1 1d       	adc	r31, r1
 232:	e0 50       	subi	r30, 0x00	; 0
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	97 70       	andi	r25, 0x07	; 7
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	a9 01       	movw	r20, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <SetLed+0x32>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	9a 95       	dec	r25
 246:	e2 f7       	brpl	.-8      	; 0x240 <SetLed+0x2e>
 248:	ca 01       	movw	r24, r20
 24a:	80 95       	com	r24
 24c:	90 81       	ld	r25, Z
 24e:	89 23       	and	r24, r25
 250:	80 83       	st	Z, r24
 252:	08 95       	ret
		}
		else
		{
			led_map[v.x][v.y / BYTE] |= _BV(v.y % BYTE);
 254:	e8 2f       	mov	r30, r24
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	89 2f       	mov	r24, r25
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	86 95       	lsr	r24
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	e8 0f       	add	r30, r24
 266:	f1 1d       	adc	r31, r1
 268:	e0 50       	subi	r30, 0x00	; 0
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	97 70       	andi	r25, 0x07	; 7
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	a9 01       	movw	r20, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <SetLed+0x68>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	9a 95       	dec	r25
 27c:	e2 f7       	brpl	.-8      	; 0x276 <SetLed+0x64>
 27e:	ca 01       	movw	r24, r20
 280:	90 81       	ld	r25, Z
 282:	89 2b       	or	r24, r25
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <SetLedLevel>:
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
{
	uint8_t i;
	
	if(v.x < X_MAX && v.y < Y_MAX)
 288:	80 33       	cpi	r24, 0x30	; 48
 28a:	70 f5       	brcc	.+92     	; 0x2e8 <SetLedLevel+0x60>
 28c:	90 31       	cpi	r25, 0x10	; 16
 28e:	60 f5       	brcc	.+88     	; 0x2e8 <SetLedLevel+0x60>
	{
		for(i = 1; i <= BYTE; i++) {
			if(i <= s) {
				led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
 290:	49 2f       	mov	r20, r25
 292:	47 70       	andi	r20, 0x07	; 7
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <SetLedLevel+0x16>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	4a 95       	dec	r20
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <SetLedLevel+0x12>
 2a2:	32 2f       	mov	r19, r18
 2a4:	30 95       	com	r19
 * 
 * Argument	: VECTOR v
 *          : uint8_t s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
 2a6:	e8 2f       	mov	r30, r24
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
	
	if(v.x < X_MAX && v.y < Y_MAX)
	{
		for(i = 1; i <= BYTE; i++) {
			if(i <= s) {
				led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
 2ae:	96 95       	lsr	r25
 2b0:	96 95       	lsr	r25
 2b2:	96 95       	lsr	r25
 * 
 * Argument	: VECTOR v
 *          : uint8_t s
 * Return	: -
 *---------------------------------------------------------------------------*/
void SetLedLevel(VECTOR v, uint8_t s)
 2b4:	e9 0f       	add	r30, r25
 2b6:	f1 1d       	adc	r31, r1
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	e0 5a       	subi	r30, 0xA0	; 160
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	df 01       	movw	r26, r30
 2ca:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t i;
	
	if(v.x < X_MAX && v.y < Y_MAX)
	{
		for(i = 1; i <= BYTE; i++) {
			if(i <= s) {
 2cc:	68 17       	cp	r22, r24
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <SetLedLevel+0x50>
				led_level[v.x][v.y / BYTE][i-1] &= ~_BV(v.y % BYTE);
 2d0:	90 81       	ld	r25, Z
 2d2:	93 23       	and	r25, r19
 2d4:	90 83       	st	Z, r25
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <SetLedLevel+0x56>
			} else {
				led_level[v.x][v.y / BYTE][i-1] |= _BV(v.y % BYTE);
 2d8:	9c 91       	ld	r25, X
 2da:	92 2b       	or	r25, r18
 2dc:	9c 93       	st	X, r25
{
	uint8_t i;
	
	if(v.x < X_MAX && v.y < Y_MAX)
	{
		for(i = 1; i <= BYTE; i++) {
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	31 96       	adiw	r30, 0x01	; 1
 2e2:	11 96       	adiw	r26, 0x01	; 1
 2e4:	89 30       	cpi	r24, 0x09	; 9
 2e6:	91 f7       	brne	.-28     	; 0x2cc <SetLedLevel+0x44>
 2e8:	08 95       	ret

000002ea <wait_ms>:
 * Argument	: uint16_t t
 * Return	: -
 *---------------------------------------------------------------------------*/
void wait_ms(uint16_t t)
{
	while(t--) _delay_ms(1);
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	41 f0       	breq	.+16     	; 0x2fe <wait_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	ef ec       	ldi	r30, 0xCF	; 207
 2f0:	f7 e0       	ldi	r31, 0x07	; 7
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <wait_ms+0x8>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <wait_ms+0xe>
 2f8:	00 00       	nop
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	c1 f7       	brne	.-16     	; 0x2ee <wait_ms+0x4>
 2fe:	08 95       	ret

00000300 <SetAll>:
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	18 2f       	mov	r17, r24
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 30a:	d0 e0       	ldi	r29, 0x00	; 0
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 30c:	00 e0       	ldi	r16, 0x00	; 0
 30e:	0a c0       	rjmp	.+20     	; 0x324 <SetAll+0x24>
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
 310:	61 2f       	mov	r22, r17
 312:	8d 2f       	mov	r24, r29
 314:	9c 2f       	mov	r25, r28
 316:	7d df       	rcall	.-262    	; 0x212 <SetLed>
 318:	cf 5f       	subi	r28, 0xFF	; 255
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
 31a:	c0 31       	cpi	r28, 0x10	; 16
 31c:	c9 f7       	brne	.-14     	; 0x310 <SetAll+0x10>
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 31e:	df 5f       	subi	r29, 0xFF	; 255
 320:	d0 33       	cpi	r29, 0x30	; 48
 322:	11 f0       	breq	.+4      	; 0x328 <SetAll+0x28>
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAll(bool s)
{
 324:	c0 2f       	mov	r28, r16
 326:	f4 cf       	rjmp	.-24     	; 0x310 <SetAll+0x10>
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLed(v, s);
		}
	}
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <SetAllLevel>:
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAllLevel(uint8_t s)
{
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	18 2f       	mov	r17, r24
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 33c:	d0 e0       	ldi	r29, 0x00	; 0
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAllLevel(uint8_t s)
{
 33e:	00 e0       	ldi	r16, 0x00	; 0
 340:	0a c0       	rjmp	.+20     	; 0x356 <SetAllLevel+0x24>
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLedLevel(v, s);
 342:	61 2f       	mov	r22, r17
 344:	8d 2f       	mov	r24, r29
 346:	9c 2f       	mov	r25, r28
 348:	9f df       	rcall	.-194    	; 0x288 <SetLedLevel>
 34a:	cf 5f       	subi	r28, 0xFF	; 255
void SetAllLevel(uint8_t s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
 34c:	c0 31       	cpi	r28, 0x10	; 16
 34e:	c9 f7       	brne	.-14     	; 0x342 <SetAllLevel+0x10>
*---------------------------------------------------------------------------*/
void SetAllLevel(uint8_t s)
{
	VECTOR v;
	
	for( v.x = 0; v.x < X_MAX; v.x++) {
 350:	df 5f       	subi	r29, 0xFF	; 255
 352:	d0 33       	cpi	r29, 0x30	; 48
 354:	11 f0       	breq	.+4      	; 0x35a <SetAllLevel+0x28>
*
* Argument	: -
* Return	: -
*---------------------------------------------------------------------------*/
void SetAllLevel(uint8_t s)
{
 356:	c0 2f       	mov	r28, r16
 358:	f4 cf       	rjmp	.-24     	; 0x342 <SetAllLevel+0x10>
	for( v.x = 0; v.x < X_MAX; v.x++) {
		for( v.y = 0; v.y < Y_MAX; v.y++){
			SetLedLevel(v, s);
		}
	}
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <main>:
#include "drv.h"
#include "app/app.h"

int main(void)
{
	Initialize();
 364:	85 de       	rcall	.-758    	; 0x70 <Initialize>
	
    while(1)
    {
		flash();
 366:	77 de       	rcall	.-786    	; 0x56 <flash>
 368:	fe cf       	rjmp	.-4      	; 0x366 <main+0x2>

0000036a <__udivmodhi4>:
 36a:	aa 1b       	sub	r26, r26
 36c:	bb 1b       	sub	r27, r27
 36e:	51 e1       	ldi	r21, 0x11	; 17
 370:	07 c0       	rjmp	.+14     	; 0x380 <__udivmodhi4_ep>

00000372 <__udivmodhi4_loop>:
 372:	aa 1f       	adc	r26, r26
 374:	bb 1f       	adc	r27, r27
 376:	a6 17       	cp	r26, r22
 378:	b7 07       	cpc	r27, r23
 37a:	10 f0       	brcs	.+4      	; 0x380 <__udivmodhi4_ep>
 37c:	a6 1b       	sub	r26, r22
 37e:	b7 0b       	sbc	r27, r23

00000380 <__udivmodhi4_ep>:
 380:	88 1f       	adc	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	5a 95       	dec	r21
 386:	a9 f7       	brne	.-22     	; 0x372 <__udivmodhi4_loop>
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	bc 01       	movw	r22, r24
 38e:	cd 01       	movw	r24, r26
 390:	08 95       	ret

00000392 <__umulhisi3>:
 392:	a2 9f       	mul	r26, r18
 394:	b0 01       	movw	r22, r0
 396:	b3 9f       	mul	r27, r19
 398:	c0 01       	movw	r24, r0
 39a:	a3 9f       	mul	r26, r19
 39c:	01 d0       	rcall	.+2      	; 0x3a0 <__umulhisi3+0xe>
 39e:	b2 9f       	mul	r27, r18
 3a0:	70 0d       	add	r23, r0
 3a2:	81 1d       	adc	r24, r1
 3a4:	11 24       	eor	r1, r1
 3a6:	91 1d       	adc	r25, r1
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
